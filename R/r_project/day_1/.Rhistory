df_new <- df_raw
df_new <- rename(da_new, v2 = var2)
df_new
df_new <- rename(da_new, v2 = var2)
df_new <- rename(df_new, v2 = var2)
df_new
df <- data.frame(var1 = c(4, 3, 8), var2 = c(2, 6, 1) )
df <- data.frame(var1 = c(4, 3, 8), var2 = c(2, 6, 1) )
df
df$sum <- df$var1 + df$var2
df
df$mean <- (df$var1 + df$var2)/2
df
summary(mpg$total)
# 통합연비(cty/hwy) 변수 추가
mpg$total <- (mpg&cty + mpg$hwy)/2
mpg
# 통합연비(cty/hwy) 변수 추가
mpg$total <- (mpg&cty + mpg$hwy)/2
mpg
# 통합연비(cty/hwy) 변수 추가
mpg$total <- (mpg$cty + mpg$hwy)/2
mpg
# 통합연비에 대한 분포 시각화 작업 ㅣ hist()
hist()
# 통합연비에 대한 분포 시각화 작업 ㅣ hist()
hist(data=mpg, x=total)
# 통합연비에 대한 분포 시각화 작업 ㅣ hist()
hist(x=mpg$total)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
summary(mpg$test)
mpg$test
# mpg$test : 값 데이터에 대한 빈도수를 표 형태로 출력
table(mpg$test)
# mpg$test <- ifelse(조건, 참일 경우, 거짓일 경우)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
mpg
table(mpg$grade)
hist(mpg$grade)
qplot(mpg$grade)
exam <- read_excel("C:/r_project/data/excel_exam.xlsx")
exam
exam %>% filter(class ==1)
a <- c(10, 15) %>% mean(a) %>% table(b)
a <- c(10, 15) %>% mean() %>% table()
a
exam %>% filter(class == 1 & mate >= 50)
exam %>% filter(class == 1 & math >= 50)
exam %>% filter(class != 1 & math >= 50)
exam %>% filter(class %in% c(1,3,5))
exam %>% select(math, class)
exam %>% select(-math)
result <- exam %>% filter(class==1) %>% select(math)
result
exam %>% arrange(math, class)
e < exam %>% mutate(total = math + english + science) %>% head
e <- exam %>% mutate(total = math + english + science) %>% head
e
e <- exam %>% mutate(total = math + english + science)
e
e <- exam %>% mutate(total = math + english + science,
mean = (math + english + science)/3)
e
exam %>% mutate(test = ifelse(science >= 90, "PASS", "FAIL"))
e %>% mutate(test = ifelse(mean >= 60, "PASS", "FAIL"))
e %>% mutate(test = ifelse(mean >= 70, "PASS", "FAIL"))
e %>% mutate(test = ifelse(mean >= 70, "PASS", "FAIL")) %>% arrange(test)
exam %>% summarise(mean_math = mean(math))
exam %>% summarise(mean_math = mean(math))
exam %>% group_by(class) %>% summarise(mean_math = mean(math))
exam %>% group_by(class) %>% summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math))
exam %>% group_by(class) %>% summarise(mean_math = mean(math),
sum_math = sum(math),
median_math = median(math),
n = n())
# 중간/기말고사 데이터 생성
test1 <- data.frame(id = c(1,2,3,4,5), midterm=c(60,80,70,90,85))
test2 <- data.frame(id = c(1,2,3,4,5), midterm=c(70,83,65,95,80))
total <- left_join(test1, test2, by ='id')
library(dplyr)
total <- left_join(test1, test2, by ='id')
total
# 학생 1-5 데이터 생성
group_a <- data.frame(id = c(1,2,3,4,5), test = c(60,80,70,90,85))
# 학생 1-5 데이터 생성
group_b <- data.frame(id = c(6,7,8,9,10), test = c(70,83,65,95,80))
# 데이터프레임 세로로 합치기
group_all <- bind_rows(group_a, group_b)
group_all
df <- data.frame(sex=c("M","F",NA,"M","F"), score=c(5,4,3,4,NA))
df
is.na(df)
table(is.na())
table(is.na(df))
table(is.na(df$sex))
mean(df)
mean(df$score)
df %>% filter(is.na(score))
# 결측치가 아닌 행만 추출
df %>% filter(!is.na(score))
# score의 결측치가 없는 df 만들기
df_nomiss <- df %>% filter(!is.na(score))
mean(df_nomiss$score)
sum(df_nomiss$score)
# score, sex 모두 결측치 없애기
df_nomiss <- df %>% filter(!is.na(score) & !is.na(sex))
df_nomiss
# 결측치가 하나라도 있는 행 제거하기
df_nomiss2 <- na.omit(df)
df_nomiss2
mean(df$score, na.rm=T)
sum(df$score, na.rm = T)
exam
exam[c(3,8,15), "math"] <- NA
exam
exam %>% summarise(mean_math = mean(math))
exam %>% summarise(mean_math = mean(math), na.rm=T)
exam %>% summarise(mean_math = mean(math, na.rm=T))
exam %>% summarise(mean_math = mean(math, na.rm=T),
sum_math = sum(math, na.rm=T),
median_math = median(math, na.rm=T))
# 평균으로 대체하기
mean(exam$math, na.rm = T)
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
table(is.na(exam$math))
exam$math
exam
outlier <- data.frame(sex=c(1,2,1,3,2,1),
score=c(5,4,3,4,2,6))
outlier
table(outlier)
# 이상치를 NA값으로 변환하기
outlier$sex <- ifelse(outlier$sex >= 3, NA, outlier$sex)
outlier$sex
outlier$score <- ifelse(outlier$score >= 6, NA, outlier$score)
outlier
outlier %>%
filter(!is.na(sex) & !is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score = mean(score))
boxplot(mpg$hwy)
library(ggplot2)
mpg <- as.data.frame(ggplot2::mpg)
boxplot(mpg$hwy)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
library(dplyr)
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
library(dplyr)
library(ggplot2)
ggplot(data=mpg, aes(x=displ, y=hwy))
# 배경에 산점도 추가
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point()
# 배경에 산점도 추가
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point() + xlim(3, 6)
# 배경에 산점도 추가
ggplot(data=mpg, aes(x=displ, y=hwy)) +
geom_point() +
xlim(3, 6) +
ylim(10, 30)
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
ggplot(data=df_mpg, aes(x=drv, y=mean_hwy)) + geom_col()
df_mpg
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm=T))
df_mpg
ggplot(data=df_mpg, aes(x=drv, y=mean_hwy)) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean(hwy)), y=mean_hwy)) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy)), y=mean_hwy)) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy)), y=mean_hwy) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy))), y=mean_hwy()) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy))), y=mean_hwy() + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy), y=mean_hwy()) + geom_col()
ggplot(data=df_mpg, aes(x= reorder(drv, -mean_hwy), y=mean_hwy)) + geom_col()
ggplot(data=df_mpg, aes(x = reorder(drv, -mean_hwy), y=mean_hwy)) + geom_col()
ggplot(data=mpg, aes(x=drv)) + geom_bar()
# 변수의 분포를 나타내는 빈도막대그래프(x축 연속형 자료)
ggplot(data=mpg, aes(x=hwy)) + geom_bar()
ggplot(data=economics, aes(x=date, y=unemploy)) + geom_line
ggplot(data=economics, aes(x=date, y=unemploy)) + geom_line()
ggplot(data=mpg, aes(x=drv, y=hwy)) + geom_boxplot()
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
install.packages("readxl")
library(readxl)
raw_welfare <- read.spss(file="Koweps_hpc10_2015_beta1.sav",
to.data.frame = T)
welfare <- raw_welfare
welfare
head(welfare)
summary(welfare)
welfare <- rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7)
class(welfare$sex)
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex ==1, "male", "female")
table(welfare$sex)
qplot(welfare$sex)
calss(welfare$income)
class(welfare$income)
summary(welfare$income)
qplot(welfare$income)
library(dplyr)
library(ggplot2)
qplot(welfare$income)
qplot(welfare$income) + xlim(0, 1000)
# 이상치 확인
summary(welfare$income)
# 이상치 결측 처리
welfare$income <- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)
# 결측치 확인
table(is.na(welfare$income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data = sex_income, aes(x=sex, y=mean_income)) + geom_col()
# 나이에 따른 월급 비교해보기
class(welfare$birth)
sumary(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
summart(welfare$birth)
summary(welfare$birth)
#결측치 확인
table(is.na(welfare$birth))
# 파생변수 만들기 - 나이
welfare$age <- 2015 - welfare$birth + 1
summary(welfare$age)
qplot(welfare$age)
# 나이에 따른 월급 평균표 만들기
age_income  <- welfare$income %>%
group_by(age) %>%
summarise(mean_income = mean(income))
# 나이에 따른 월급 평균표 만들기
age_income  <- welfare %>%
filter(!is.na(income)) %>%
group_by(age) %>%
summarise(mean_income = mean(income))
head(age_income)
# 그래프 만들기
ggplot(data = age_income, aes(x=age, y=mean_income)) + geom_line()
# 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age < 30, "young", ifesle(age <= 59, "middle", "old")))
# 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age < 30, "young", ifeles(age <= 59, "middle", "old")))
# 파생변수 만들기
welfare <- welfare %>%
mutate(ageg = ifelse(age < 30, "young", ifelse(age <= 59, "middle", "old")))
table(welfare$ageg)
qplot(welfare$ageg)
# 분석
ageg_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg) %>%
summarise(mean_income = mean(income))
ageg_income
ggplot(data = ageg_income, aes(x = ageg, y = mean_income)) + geom_col()
ggplot(data = ageg_income, aes(x = ageg, y = mean_income)) +
geom_col() +
scale_x_discrete(limits = c("young", "middle", "old"))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(ageg, sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill = sex)) +
geom_col() +
scale_x_discrete(limits = c("young", "middle", "old"))
ggplot(data=sex_income, aes(x=ageg, y=mean_income, fill = sex)) +
geom_col(position = "dodge") +
scale_x_discrete(limits = c("young", "middle", "old"))
sex_age
head(sex_age)
# 성별 연령별 월급 평균표 만들기
sex_age <- welfare %>%
filter(!is.na(income)) %>%
group_by(age, sex) %>%
summarise(mean_income = mean(income))
head(sex_age)
# 그래프 그리기
ggplot(data = sex_age, aes(x = age, y = mean_income, col = sex)) + geom_line()
class(welfare$code_job)
table(welfare$code_job)
library(readxl)
list_job <- read_excel("Koweps_Codebook.xlsx", col_names = T, sheet = 2)
head(list_job)
dim(list_job)
welfare <- left_join(welfare, list_job, id="code_job")
welfare %>%
filter(!is.na(code_job)) %>%
select(code_job, job) %>%
head(10)
# 결측값 제거하기
job_income <- welfare %>%
filter(!is.na(job) & !is.na(income)) %>%
group_by(job) %>%
summarise(mean_income = mean(income))
head(job_income)
# 상위 10개 추출하기
top10 <- job_income %>%
arrange(desc(mean_income)) %>%
head(10)
top10
# 그래프로 그려보기
ggplot(data=top10, aes(x= reorder(job, mean_income), y=mean_income)) + geom_col()
# 그래프로 그려보기
ggplot(data=top10, aes(x= reorder(job, mean_income), y=mean_income)) +
geom_col() +
coord_flip() #글자 겹쳐서 90도 회전전
# 하위 10개 추출하기
bottom10 <- job_income %>%
arrange(mean_income) %>%
head(10)
bottom10
# 그래프로 그려보기
ggplot(data=bottom10, aes(x=reorder(job, -mean_income), y=mean_income))+
geom_col() +
coord_flip()
# 그래프로 그려보기
ggplot(data=bottom10, aes(x=reorder(job, -mean_income), y=mean_income))+
geom_col() +
coord_flip() +
ylim(0,850)
# 남성 직업 빈도 상위 10개 추출
job_male <- welfare %>%
filter(!is.na(job) & sex == "male") %>%
group_by(job) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
job_male
# 여성 직업 빈도 상위 10개 추출
job_female <- welfare %>%
filter(!is.na(job) & sex == "female") %>%
group_by(job) %>%
summarise(n = n()) %>%
arrange(desc(n)) %>%
head(10)
job_female
# 그래프로 표현하기
ggplot(data=job_male, aes(x=reorder(job, n), y=n)) +
geom_col() +
coord_flip()
ggplot(data=job_female, aes(x=reorder(job, n), y=n)) +
geom_col() +
coord_flip()
# 변수 검토
class(welfare$religion)
table(welfare$religion)
welfare$religion <- ifelse(welfare$religion ==1, "yes", "no")
table(welfare$religion)
qplot(welfare$religion)
# 변수 검토(결혼)
class(welfare$marriage)
table(welfare$marriage)
welfare$group_marriage <- ifelse(welfare$marriage ==1, "marriage",
ifelse(welfare$marriage ==3, "divorce", NA))
qplot(welfare$group_marriage)
# 종교에 따른 이혼율 분석하기
religion_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(religion, group_marriage) %>%
summarise(n=n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
religion_marriage
# 이혼 추출
divorce <- religion_marriage %>%
filter(group_marriage == "divorce") %>%
select(religion, pct)
divorce
ggplot(data=divorce, aes(x=religion, y=pct)) + geom_col()
# 연령대별 이혼율 표 만들기
ageg_marrige <- welfare %>%
filter(!is.na(group_marrige)) %>%
group_by(ageg, group_marriage) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100), 1)
# 연령대별 이혼율 표 만들기
ageg_marrige <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100), 1)
# 초년 제외, 이혼 추출
ageg_divorce <- ageg_marriage %>%
filter(ageg != "young" & group_marriage == "divorce") %>%
select(ageg, pct)
# 연령대별 이혼율 표 만들기
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100), 1)
# 초년 제외, 이혼 추출
ageg_divorce <- ageg_marriage %>%
filter(ageg != "young" & group_marriage == "divorce") %>%
select(ageg, pct)
ageg_divorce
# 연령대별 이혼율 표 만들기
ageg_marriage <- welfare %>%
filter(!is.na(group_marriage)) %>%
group_by(ageg, group_marriage) %>%
summarise(n = n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
# 초년 제외, 이혼 추출
ageg_divorce <- ageg_marriage %>%
filter(ageg != "young" & group_marriage == "divorce") %>%
select(ageg, pct)
ageg_divorce
# 그래프 만들기
ggplot(data=ageg_divorce, aes(x=ageg, y=pct)) + geom_col()
ageg_religion_marriage <- welfare %>%
filter(!is.na(group_marriage) & ageg != "young") %>%
group_by(ageg, religion, group_marriage) %>%
summarise(n =n()) %>%
mutate(tot_group = sum(n)) %>%
mutate(pct = round(n/tot_group*100, 1))
ageg_religion_marriage
df_divorce <- ageg_religion_marriage %>%
filter(group_marriage == "divorce") %>%
select(ageg, religion, pct)
ggplot(data=df_divorce, aes(x=ageg, y=pct, fill=religion)) +
geom_col(position = "dodge")
# 변수 검토하기
class(welfare$code_region)
table(welfare$code_region)
# 지역 코드 목록 만들기
lits_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
# 지역 코드 목록 만들기
list_region <- data.frame(code_region = c(1:7),
region = c("서울",
"수도권",
"부산/경남/울산",
"대구/경북",
"대전/충남",
"강원/충북",
"광주/전남/전북/제주도"))
list_region
#지역명 변수추가
welfare <- left_join(welfare, list_region, id="code_region")
welfare %>%
select(code_region, region) %>%
head
# 지역별 연령대 비율표 만들기
region_ageg <- welfare %>%
count(region, ageg) %>% #첫번째 변수별 두번째 인자값 카운트
group_by(region) %>%
mutate(pct = round(n/sum(n)*100, 2))
region_ageg
# 그래프로 표현하기
ggplot(data=region_ageg, aes(x=region, y=pct, fill=ageg)) +
geom_col() +
coord_flip()
# 노년층 비율 높은 순으로 막대 정렬하기
list_order_old <- region_ageg %>%
filter(ageg == "old") %>%
arrange(pct)
order <- list_order_old$region
ggplot(data=region_ageg, aes(x=region, y=pct, fill=ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits=order)
order
# 연령 순으로 막대 나열하기
class(region_ageg$ageg)
# factor()와 level로 순서 지정하기
region_ageg$ageg <- ractor(region_ageg$ageg,
level = c("old", "middle", "young"))
# factor()와 level로 순서 지정하기
region_ageg$ageg <- factor(region_ageg$ageg,
level = c("old", "middle", "young"))
levles(region_ageg$ageg)
levels(region_ageg$ageg)
ggplot(data=region_ageg, aes(x=region, y=pct, fill=ageg)) +
geom_col() +
coord_flip() +
scale_x_discrete(limits=order) # limits 순으로 정렬(limits = c(1,2,3))
